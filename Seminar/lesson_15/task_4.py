"""–ó–∞–¥–∞–Ω–∏–µ ‚Ññ4
    üìå –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞: ‚Äú1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è‚Äù,
       ‚Äú3-—è —Å—Ä–µ–¥–∞ –º–∞—è‚Äù –∏ —Ç.–ø.
    üìå –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –µ–≥–æ –≤ –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É.
    üìå –õ–æ–≥–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É."""
# from datetime import datetime
#
#
# def parse_str(text: str):
#     DAYS_IN_MONTH = 30
#     week, day, month = text.split()
#     week = int(week[0])
#     day = parse_day(day)
#     month = parse_month(month)
#     year = datetime.now().year
#     week_counter = 0
#     for i in range(1, DAYS_IN_MONTH + 1):
#         data = datetime(day=i, month=month, year=year)
#         if data.weekday() == day:
#             week_counter += 1
#             if week_counter == week:
#                 return data
#
#
# def parse_month(month: str) -> int:
#     months = {'—è–Ω–≤': 1, '—Ñ–µ–≤': 2, '–º–∞—Ä': 3, "–∞–ø—Ä": 4, "–º–∞—è": 5, "–∏—é–Ω": 6, "–∏—é–ª": 7, "–∞–≤–≥": 8, "—Å–µ–Ω": 9,
#               "–æ–∫—Ç": 10, "–Ω–æ—è": 11, "–¥–µ–∫": 12}
#     return months.get(month[:3], None)
#
#
# def parse_day(day: str) -> int:
#     match day.lower():
#         case "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":
#             return 0
#         case "–≤—Ç–æ—Ä–Ω–∏–∫":
#             return 1
#         case "—Å—Ä–µ–¥–∞":
#             return 2
#         case "—á–µ—Ç–≤–µ—Ä–≥":
#             return 3
#         case "–ø—è—Ç–Ω–∏—Ü–∞":
#             return 4
#         case "—Å—É–±–±–æ—Ç–∞":
#             return 5
#         case "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":
#             return 6
#
#
# if __name__ == '__main__':
#     print(parse_str("1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è"))
#     print(parse_str("3-—è —Å—Ä–µ–¥–∞ –º–∞—è"))

import logging
from datetime import datetime, date

logging.basicConfig(filename='error.log',
                    filemode='w',
                    encoding='utf-8',
                    level=logging.INFO)
logger = logging.getLogger()

months = {'—è–Ω–≤': 1, '—Ñ–µ–≤': 2, '–º–∞—Ä': 3, '–∞–ø—Ä': 4, '–º–∞–π': 5,
          '–∏—é–Ω': 6, '–∏—é–ª': 7, '–∞–≤–≥': 8, '—Å–µ–Ω': 9, '–æ–∫—Ç': 10,
          '–Ω–æ—è': 11, '–¥–µ–∫': 12}
weekdays = {'–ø–æ–Ω': 1, '–≤—Ç–æ': 2, '—Å—Ä–µ': 3, '—á–µ—Ç': 4, '–ø—è—Ç': 5,
            '—Å—É–±': 6, '–≤–æ—Å': 7}


def text_to_date(text: str):
    try:
        year = datetime.now().year
        count, weekday_, month_ = text.split()
        month = months[month_[:3]]
        weekday = weekdays[weekday_[:3]] - 1
        count = int(count[0])
    except Exception as exc:
        logger.info(f'{count}-–π  {weekday_}  {month_} {year} =  –æ—à–∏–±–∫–∞: {exc}')

    count_week = 0
    for day in range(1, 31 + 1):
        result = date(year=year, month=month, day=day)
        if result.weekday() == weekday:
            count_week += 1
            if count_week == count:
                logger.info(f'{count}-–π {weekday_} {month_} {year} = {result} ')
                return result


if __name__ == '__main__':
    print('2-–π –≤—Ç–æ—Ä–Ω–∏–∫ –º–∞—è:', text_to_date('2-–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –º–∞–π'))
    print('3-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è:', text_to_date('3-–π –≤—Ç–æ—Ä–Ω–∏–∫ –Ω–æ—è–±—Ä—è'))
    print('4-—è —Å—Ä–µ–¥–∞ –º–∞—è:', text_to_date('4-—è —Å—Ä–µ–¥–∞ –º–∞–π'))

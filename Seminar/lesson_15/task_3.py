"""–ó–∞–¥–∞–Ω–∏–µ ‚Ññ3
    üìå –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á—É 2.
    üìå –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤ –ª–æ–≥ —Ñ–∞–π–ª —Ä–∞–∑–¥–µ–ª—å–Ω–æ:
        ‚óã —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è,
        ‚óã –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è,
        ‚óã –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞),
        ‚óã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞,
        ‚óã —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
import logging
from datetime import datetime
from typing import Callable


def main(func: Callable):
    def wrapper(*args, **kwargs):
        logging.basicConfig(filename='log_factorial_1.log',
                            encoding='utf-8',
                            level=logging.DEBUG)
        my_datetime = datetime.now()
        logging.info(f'–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º {args} –¥–∞—Ç–∞ {my_datetime}')
        result = func(*args, **kwargs)
        logging.info(f'–†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}: {result}')
        logging.info(f'–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}')
        return result

    return wrapper


@main
def my_factorial(number: int):
    if number == 1:
        return 1
    else:
        return number * my_factorial(number - 1)


if __name__ == '__main__':
    print(my_factorial(8))

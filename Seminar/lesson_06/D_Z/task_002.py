""" –ó–∞–¥–∞–Ω–∏–µ ‚Ññ2
üìå –î–æ–±–∞–≤—å—Ç–µ –≤ –ø–∞–∫–µ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –Ω–∞ —Å–µ–º–∏–Ω–∞—Ä–µ —à–∞—Ö–º–∞—Ç–Ω—ã–π –º–æ–¥—É–ª—å. –í–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ
–∫–æ–¥, —Ä–µ—à–∞—é—â–∏–π –∑–∞–¥–∞—á—É –æ 8 —Ñ–µ—Ä–∑—è—Ö.
–ò–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ –Ω–∞ –¥–æ—Å–∫–µ 8√ó8 –º–æ–∂–Ω–æ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å 8 —Ñ–µ—Ä–∑–µ–π —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –±–∏–ª–∏ –¥—Ä—É–≥
–¥—Ä—É–≥–∞. –í–∞–º –¥–∞–Ω–∞ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ 8 —Ñ–µ—Ä–∑–µ–π –Ω–∞ –¥–æ—Å–∫–µ, –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –Ω–∏—Ö –ø–∞—Ä–∞
–±—å—é—â–∏—Ö –¥—Ä—É–≥ –¥—Ä—É–≥–∞. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –≤–æ—Å–µ–º—å –ø–∞—Ä —á–∏—Å–µ–ª, –∫–∞–∂–¥–æ–µ —á–∏—Å–ª–æ –æ—Ç
1 –¥–æ 8 - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 8 —Ñ–µ—Ä–∑–µ–π. –ï—Å–ª–∏ —Ñ–µ—Ä–∑–∏ –Ω–µ –±—å—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –≤–µ—Ä–Ω–∏—Ç–µ –∏—Å—Ç–∏–Ω—É, –∞ –µ—Å–ª–∏
–±—å—é—Ç - –ª–æ–∂—å."""

""" –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –∏ –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è 
# [(0, 3), (1, 4), (2, 0), (3, 4), (4, 5), (5, 7), (6, 1), (7, 0)]
n = 8
for i in range(n):
    for j in range(i + 1, n):
        if x[i] == x[j] or y[i] == y[j] or abs(x[i] - x[j]) == abs(y[i] - y[j]):
            return False

–≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∏—è—Ö True """
import numpy as np
import random as rnd


matrix = np.full((8, 8), 1)
# print(matrix)

result = ([])
for i in range(8):
    result.append((i, rnd.randint(0, 8 - 1)))
# for x, y in result:
#     print(x, y)
print(result)   # [(0, 3), (1, 4), (2, 0), (3, 4), (4, 5), (5, 7), (6, 1), (7, 0)]

# coor = input()
board = [['.'] * 8 for _ in range(8)]
# x = ord(x) - 97
# y = n - int(y)
y = [y for x, y in result]
x = [x for x, y in result]
print(f'x = {x}')
print(f'y = {y}')
# for i in range(8):
#     for j in range(8):
#         if (y == i) or (x == j) or abs(y - i) == abs(x - j):
#             board[i][j] = '*'
# board[y][x] = 'Q'
# for line in board:
#     print(*line)

#
n = 8
# x = []
# y = []
print(x, y)
# for i in range(n):
#     new_x, new_y = [int(s) for s in input().split()]
x.append(x)
y.append(y)
#
correct = True
for i in range(n):
    for j in range(i + 1, n):
        if x[i] == x[j] or y[i] == y[j] or abs(x[i] - x[j]) == abs(y[i] - y[j]):
            correct = False

if correct:
    print('NO')
else:
    print('YES')


# def make_row(rowdata, col, empty, full):
#     items = [col] * (2 * len(rowdata) + 1)
#     items[1::2] = (full if d else empty for d in rowdata)
#     return ''.join(items)
#
#
# def make_board(queens, col="|", row="---", empty="   ", full=" X "):
#     size = len(queens)
#     bar = make_row(queens, col, row, row)
#     board = [bar] * (2 * size + 1)
#     board[1::2] = (make_row([i == q for i in range(size)], col, empty, full) for q in queens)
#     return '\n'.join(board)


# queens = [0, 2, 6, 4, 7, 1, 5, 3]
# print(make_board(queens))


# n = 8
# x = []
# y = []
# for i in range(n):
#     new_x, new_y = [int(s) for s in input().split()]
#     x.append(new_x)
#     y.append(new_y)
#
# correct = True
# for i in range(n):
#     for j in range(i + 1, n):
#         if x[i] == x[j] or y[i] == y[j] or abs(x[i] - x[j]) == abs(y[i] - y[j]):
#             correct = False
#
# if correct:
#     print('NO')
# else:
#     print('YES')

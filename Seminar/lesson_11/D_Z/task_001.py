""" üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ú–∞—Ç—Ä–∏—Ü–∞. –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥—ã –¥–ª—è:
    ‚óã –≤—ã–≤–æ–¥–∞ –Ω–∞ –ø–µ—á–∞—Ç—å,
    ‚óã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è,
    ‚óã —Å–ª–æ–∂–µ–Ω–∏—è,
    ‚óã *—É–º–Ω–æ–∂–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü"""


class Matrix:
    """–ö–ª–∞—Å—Å –º–∞—Ç—Ä–∏—Ü–∞. –î–µ–π—Å—Ç–≤–∏—è —Å–ª–æ–∂–µ–Ω–∏–µ, –≤—ã—á–∏—Ç–∞–Ω–∏–µ, —É–º–Ω–æ–∂–µ–Ω–∏–µ, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ."""

    def __init__(self, rows: int = 2, cols: int = 2, init_value: int = 0, *, matrix: list[list[int]] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü—ã"""
        if matrix is None:
            self.__matrix = []
            for _ in range(rows):
                self.__matrix.append([init_value for _ in range(cols)])
        else:
            rows = len(matrix)
            cols = len(matrix[0])
            self.__matrix = matrix

        self.__cols = cols
        self.__rows = rows

    def __add__(self, other):
        """–°–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü. –û–¥–Ω–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏."""
        if self.__rows != other.__rows or self.__cols != other.__cols:
            return None

        result = Matrix(self.__rows, self.__cols)
        for i in range(result.__rows):
            for j in range(result.__cols):
                result.__matrix[i][j] = self.__matrix[i][j] + other.__matrix[i][j]

        return result

    def __sub__(self, other):
        """–í—ã—á–∏—Ç–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü. –û–¥–Ω–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏."""
        if self.__rows != other.__rows or self.__cols != other.__cols:
            return None

        result = Matrix(self.__rows, self.__cols)
        for i in range(result.__rows):
            for j in range(result.__cols):
                result.__matrix[i][j] = self.__matrix[i][j] - other.__matrix[i][j]

        return result

    def __str__(self):
        """–í—ã–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã –Ω–∞ –ø–µ—á–∞—Ç—å."""
        result = []
        for row in self.__matrix:
            for val in row:
                result.append(f"{val:2}\t")
            result.append("\n")
        return "".join(result)

    def __repr__(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã."""
        return f"Matrix(matrix={self.__matrix})"

    def __eq__(self, other):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü."""
        result = True
        if self.__rows != other.__rows or self.__cols != other.__cols:
            result = False
        else:
            for i in range(self.__rows):
                for j in range(self.__cols):
                    if self.__matrix[i][j] != other.__matrix[i][j]:
                        result = False
                        break
                if not result:
                    break

        return result

    def __mul__(self, other):
        """–£–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü."""
        if self.__cols != other.__rows:
            return None

        result = Matrix(self.__rows, other.__cols)
        for i in range(result.__rows):
            for j in range(result.__cols):
                for k in range(result.__cols):
                    result.__matrix[i][j] = self.__matrix[i][k] * other.__matrix[j][k]

        return result


if __name__ == '__main__':
    matrix_1 = Matrix(matrix=[[2, 3, 8], [4, 6, 9], [5, 7, 1]])
    matrix_2 = Matrix(matrix=[[4, 2, 8], [7, 1, 5], [2, 8, 3]])

    print("–ú–∞—Ç—Ä–∏—Ü–∞ 1")
    print(matrix_1)
    print("–ú–∞—Ç—Ä–∏—Ü–∞ 2")
    print(matrix_2)
    print(f"{matrix_1 = }")
    print(f"{matrix_2 = }")

    matrix_3 = matrix_1 + matrix_2
    matrix_4 = matrix_1 - matrix_2

    print("–°–ª–æ–∂–µ–Ω–∏–µ matrix_1 + matrix_2")
    print(matrix_3)
    print("–í—ã—á–∏—Ç–∞–Ω–∏–µ matrix_1 - matrix_2")
    print(matrix_4)

    print(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ matrix_1 == matrix_1 - {matrix_1 == matrix_1}")
    print(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ matrix_1 == matrix_2 - {matrix_1 == matrix_2}")

    matrix_5 = Matrix(matrix=[[4, 2, 8], [7, 1, 5], [2, 8, 3]])
    matrix_6 = Matrix(matrix=[[4, 8], [1, 5], [2, 3]])
    matrix_7 = Matrix(matrix=[[4, 2, 8], [7, 1, 5]])

    print("–ú–∞—Ç—Ä–∏—Ü–∞ 5")
    print(matrix_5)
    print("–ú–∞—Ç—Ä–∏—Ü–∞ 6")
    print(matrix_6)

    print("matrix_1 * matrix_5")
    print(matrix_1 * matrix_5)
    print("matrix_1 * matrix_6")
    print(matrix_1 * matrix_6)

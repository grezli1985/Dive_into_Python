""" Обработка исключительных ситуаций в Python

На протяжении курса мы регулярно сталкивались с ошибками в программах. Python
выдавал несколько строк красного текста в консоль — результат трассировки
ошибки. И после такого программа переставала работать.
Встроенный в язык механизм обработки исключений позволяет изменить
поведение программы при появлении ошибки. Впрочем, некоторые ошибки
действительно должны завершать программу. О них подробнее чуть позже в этой
лекции.
А пока рассмотрим простой пример кода и результат его выполнения
Код: """

num = int(input('Введите целое число: '))

"""Результат
Введите целое число: сорок два
Traceback (most recent call last):
# File "Users\main.py", line 1, in <module>
num = int(input('Введите целое число: '))
ValueError: invalid literal for int() with base 10: 'сорок два'
Process finished with exit code 1

Программа запросила целое число, пользователь написал “сорок два” и мы
получили ошибку ValueError. Красный текст — результат трассировки ошибки.
Читать его лучше построчно снизу вверх. Самая нижняя строка указывает какую
именно ошибку мы получили и почему. Строкой выше указывается строчка кода,
повлёкшая ошибку. Отдельно Python указывает название файла с номером строки
для быстрого перехода к месту ошибки. При этом строчек с кодом и указаниями на
строки ошибки может быть несколько. Зависит от того как долго ошибка
распространялась по цепочке кода."""

import copy

""" Зачем нужна функция copy.deepcopy() """

""" Иногда программисту приходится работать с вложенными друг в друга
коллекциями. Например матрица или список списков."""

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
new_m = matrix.copy()           # [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(matrix, new_m, sep='\n')  # [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
matrix[0][1] = 555              # [[1, 555, 3], [4, 5, 6], [7, 8, 9]]v
print(matrix, new_m, sep='\n')  # [[1, 555, 3], [4, 5, 6], [7, 8, 9]]

""" Метод copy создал поверхностную копию, копию верхнего уровня. Изменения же
вложенных объектов отразится и на оригинале. В таком случае для создания
полной копии любой глубины вложенности используют функцию deepcopy из
модуля copy."""

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
new_m = copy.deepcopy(matrix)   # [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(matrix, new_m, sep='\n')  # [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
matrix[0][1] = 555              # [[1, 555, 3], [4, 5, 6], [7, 8, 9]]
print(matrix, new_m, sep='\n')  # [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

""" Функция рекурсивно обходит все вложенные объекты создавая их копии.
Изменения одной коллекции теперь не затрагивают её копию."""

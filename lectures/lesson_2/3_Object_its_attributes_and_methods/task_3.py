'''Интерактивная работа со справкой, help()

Введите команду symbols, далее любой заинтересовавший вас символ из списка.
Прочитайте описание и напишите в чат пару слов о том, что узнали.'''
help()

'''help> symbols

Here is a list of the punctuation symbols which Python assigns special meaning
to. Enter any symbol to get more help. '''

#   !=                  +                   <=                  __
#   "                   +=                  <>                  `
#   """                 ,                   ==                  b"
#   %                   -                   >                   b'
#   %=                  -=                  >=                  f"
#   &                   .                   >>                  f'
#   &=                  ...                 >>=                 j
#   '                   /                   @                   r"
#   '''                 //                  J                   r'
#   (                   //=                 [                   u"
#   )                   /=                  \                   u'
#   *                   :                   ]                   |
#   **                  <                   ^                   |=
#   **=                 <<                  ^=                  ~
#   *=                  <<=                 _

'''
help> !=
Приоритет оператора
*******************

В следующей таблице приведены приоритеты операторов в Python, начиная с
наивысший приоритет (наиболее обязательный) к самому низкому приоритету (наименее
привязка). Операторы в одном поле имеют одинаковый приоритет. Пока не
синтаксис указан явно, операторы бинарные. Операторы в
ту же группу блоков слева направо (за исключением возведения в степень и
условные выражения, которые группируются справа налево).

Обратите внимание, что сравнения, тесты на принадлежность и тесты на идентичность
тот же приоритет и имеют функцию цепочки слева направо, как
описано в разделе «Сравнения».

+-------------------------------------------------+---------------------------------------+
| Operator  Оператор                              | Description    Описание               |
|=================================================|=======================================|
| "(expressions...)",  "[expressions...]", "{key: | Связывание или выражение в скобках,   |
| value...}", "{expressions...}"                  | отображение списка,отображение словаря,|
|                                                 | набор отображать                      |
+-------------------------------------------------+---------------------------------------+
| "x[index]", "x[index:index]",                   | Подписка, нарезка, звонок,            |
| "x(arguments...)", "x.attribute"                | ссылка на атрибут                     |
+-------------------------------------------------+---------------------------------------+
| "await x"                                       | Ожидание выражения                    |
+-------------------------------------------------+---------------------------------------+
| "**"                                            | Возведение в степень [5]              |
+-------------------------------------------------+---------------------------------------+
| "+x", "-x", "~x"                                | Положительное, отрицательное, побитовое НЕ |
+-------------------------------------------------+---------------------------------------+
| "*", "@", "/", "//", "%"                        | Умножение, матрица                    |
|                                                 | умножение, деление, пол               |
|                                                 | деление, остаток [6]                  |
+-------------------------------------------------+---------------------------------------+
| "+", "-"                                        | Сложение и вычитание                  |
+-------------------------------------------------+---------------------------------------+
| "<<", ">>"                                      | Смены                                 |
+-------------------------------------------------+---------------------------------------+
| "&"                                             | Bitwise AND     Побитовое И           |
+-------------------------------------------------+---------------------------------------+
| "^"                                             | Bitwise XOR Побитовое исключающее ИЛИ |
+-------------------------------------------------+---------------------------------------+
| "|"                                             | Bitwise OR Побитовое ИЛИ              |
+-------------------------------------------------+---------------------------------------+
| "in", "not in", "is", "is not", "<", "<=", ">", | Сравнения, включая членство           |
| ">=", "!=", "=="                                | тесты и тесты на идентичность         |
+-------------------------------------------------+---------------------------------------+
| "not x"                                         | Boolean NOT  логическое НЕ            |
+-------------------------------------------------+---------------------------------------+
| "and"                                           | Boolean AND  Логическое И             |
+-------------------------------------------------+---------------------------------------+
| "or"                                            | Boolean OR   Логическое ИЛИ           |
+-------------------------------------------------+---------------------------------------+
| "if" – "else"                                   | Условное выражение                    |
+-------------------------------------------------+---------------------------------------+
| "lambda"                                        | Лямбда-выражение                      |
+-------------------------------------------------+---------------------------------------+
| ":="                                            | Выражение присваивания                |
+-------------------------------------------------+---------------------------------------+

-[ Footnotes Сноски ]-

[1] В то время как «abs(x%y) <abs(y)» верно математически, 
     для чисел с плавающей запятой это
     может быть неверным численно из-за округления. Например, и
     предполагая, что платформа, на которой число с плавающей запятой 
     Python является двойным значением IEEE 754,
     число точности, чтобы "-1e-100 % 1e100" имели то же самое
     знак как "1e100", вычисленный результат "-1e-100 + 1e100", что
     численно точно равен «1e100». Функция
     "math.fmod()" возвращает результат, знак которого совпадает со знаком
     вместо первого аргумента и в этом случае возвращает «-1e-100».
     Какой подход является более подходящим, зависит от приложения.

[2] Если x очень близко к точному целому кратному y, это
     возможно, что "x//y" будет на единицу больше, чем "(x-x%y)//y" из-за
     округление. В таких случаях Python возвращает последний результат, в
     чтобы сохранить, что "divmod(x,y)[0] * y + x % y" будет очень близко
     на «х».

[3] Стандарт Unicode различает *кодовые точки* (например,
     U+0041) и *абстрактные символы* (например, «ЛАТИНСКАЯ ЗАГЛАВНАЯ БУКВА A»).
     В то время как большинство абстрактных символов в Unicode представлены только
     используя одну кодовую точку, существует ряд абстрактных символов
     которые могут быть дополнительно представлены с помощью последовательности более чем
     одна кодовая точка. Например, абстрактный символ «ЛАТИНСКИЙ
     ЗАГЛАВНАЯ БУКВА C С СЕДИЛЬЕЙ» можно представить как единый
     *предварительно составленный символ* в кодовой позиции U+00C7 или в виде последовательности
     *базового символа* в кодовой позиции U+0043 (ЛАТИНСКАЯ ЗАГЛАВНАЯ
     БУКВА C), за которой следует *комбинирующий символ* в кодовой позиции
     U + 0327 (ОБЪЕДИНЕНИЕ СЕДИЛЬИ).

    Операторы сравнения строк сравниваются на уровне
     Кодовые точки Юникода. Это может быть нелогично для людей. Для
     Например, ""\u00C7" == "\u0043\u0327"" равно "False", хотя оба
     строки представляют один и тот же абстрактный символ «ЛАТИНСКАЯ ЗАГЛАВНАЯ
     БУКВА C С СЕДИЛЬЕЙ».

    Для сравнения строк на уровне абстрактных символов (т.
     интуитивно понятным для человека способом), используйте "unicodedata.normalize()".

[4] Благодаря автоматической сборке мусора, свободным спискам и динамическому
     характер дескрипторов, вы можете заметить, казалось бы, необычное поведение
     в некоторых случаях использования оператора «есть», например, связанных с
     сравнения между методами экземпляра или константами. Проверьте их
     документация для получения дополнительной информации.

[5] Степенной оператор «**» связывает менее жестко, чем арифметический или
     побитовый унарный оператор справа, то есть "2**-1" равно "0,5".

[6] Оператор «%» также используется для форматирования строк; одинаковый
     применяется приоритет.

Связанные разделы справки: лямбда, или, и, не, in, is, BOOLEAN, COMPARISON,
ПОБИТОВОЕ, СМЕЩЕНИЕ, ДВОИЧНОЕ, ФОРМАТИРОВАНИЕ, МОЩНОСТЬ, УНАРНОЕ, АТРИБУТЫ,
ПОДПИСКИ, НАРЕЗКИ, ВЫЗОВЫ, КОРТЕЖИ, СПИСКИ, СЛОВАРИ, СРАВНЕНИЕ
'''
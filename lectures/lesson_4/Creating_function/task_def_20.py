""" Области видимости: global и nonlocal """
""" Хорошая функция работает как чёрный ящик. Использует только переданные ей
значения и возвращает ответ. Но в Python функции могут обращаться к внешним
переменным без явной передачи в качестве аргумента.
В Python есть несколько областей видимости:
    ● локальная — код внутри самой функции, т.е. переменные заданные в теле функции.
    ● глобальная — код модуля, т.е. переменные заданные в файле py содержащем функцию.
    ● не локальная — код внешней функции, исключающий доступ к глобальным переменным.
Разберем на примерах."""

""" Локальные переменные: """


def func(y: int) -> int:
    x = 100
    # x += 100    #  UnboundLocalError: cannot access local variable 'x' where it is not associated with a value
    print(f'In func {x = }')  # Для демонстрации работы, но не для привычки принтить из функции
    return y + 1


x = 42
print(f'In main {x = }')
z = func(x)
print(f'{x = }\t{z = }')

"""Переменная x в теле функции и переменная x в основном коде - две разные
переменные. Локальная область видимости функции создала свою переменную.
Попробуем для эксперимента заменить строку с иксом на x += 100 В результате
получаем ошибку UnboundLocalError: local variable 'x' referenced before assignment.
Функция не смогла увеличить 42 на 100, т.к. переменные лишь для нас выглядят
одинаково. Чёрный ящик не увидел x без его явной передачи в функцию"""


